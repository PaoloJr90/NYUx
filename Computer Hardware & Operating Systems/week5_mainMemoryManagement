# Week 5: Main Memory & Memory Management

Reasons for Memory Management:

- In a multiprogramming system, there will never be enough main memory
- The OS will need to allocate memory to multiple programs running in the system
- The OS will need to move parts between main memory and secondary memory

Memory Management Requirements (General Laws)

- Relocation
  - A process could be loaded into any location in main memory
  - A process can be moved during its lifetime
  - Programs to be written with relocation in embedded
- Protection
  - A process should not be allowed to access memory outside of it allocation
  - The OS cannot pre-screen the memory accesses, it must be done dynamically
- Sharing
  - Some processes might use the same code/data
- Logical Organization
  - Modules, Shared Objects or Dynamically Linked Library should be allowed
- Physical Organization
  - Mapping logical memory to physical memory

Logical vs. Physical Addresses

- Primarily due to relocation, a program will have to use a logical address to access memory
- Logical address need to be converted, dynamically, to physical addresses
- A simple solution to logical addresses could be the offset from the beginning of the program
- The CPU's Hardware Memory Management unit is responsible for converting, during runtime, the logical address to a physical address

Example:
Logical Address = 5
Physical Address = 35 (30 bytes/blocks ahead of the location/house)

![physical_address](./images/week5/physical_address.png)

---

**Partitioning Strategies of Main Memory:**

- Fixed Partitioning
- Dynamic Partitioning
- Buddy System
- Simple Paging
- Simple Segmentation

_Fixed Partitioning (typically for small applications)_

- Main memory is divided into a static number of parts
- A process will be allocated one part of equal or greater size than it needs
- Equal sized partitioning
  ○ Causes internal fragmentation - wasted space inside the partition
- Unequal sized partitioning
  ○ Need to worry about which partition to place the process in

_Dynamic Partitioning (no internal fragmentation)_

- Partitions are created for exactly as much memory as the process needs
- Causes external fragmentation - wasted memory between allocations
- Requires compaction - a costly process
- OS data structures are complex because a process could start anywhere
- Where does the OS place a partition?
  - Some algorithms:
    - Best-fit --> the area with the size closest (causes external fragmentation)
    - First-fit --> just choose the first spot in memory large enough
    - Next-fit --> begin looking from the location of last allocation

![partitions](./images/week5/partitions.png)

_Buddy System_

- Compromise between fixed and dynamic
- Memory is divided and divided again in multiples of 2
- 2MB of memory might be divided as such, if we need a 100Kb allocation
- The process would be given the first 128 Kb space
- If we have a large number of 100 Kb processes we would further divide the larger partitions to accommodate the need
- This makes the OS structures easier because processes begin and end on a 2^n boundary
- Internal fragmentation due to wasted internal space (allocated 128 Kb, but using only 100 Kb)
- External fragmentation - adjacent sections may not be coalesced into a larger partition until those are emptied (freed)

_Simple Paging_

- Memory is broken down into all equal-sized frames (ex: 4K)
- A process is broken down into the same sized pages (ex: 4K)
- Since this is RAM, no frame is better suited for the task of storing the page that any other. All have O(1) access time
- Pages are loaded into non-contiguous frames
- The OS records the frame number for each page in a Page Map Table (PMT) stored in the PCB
  The hardware memory management unit (MMU) needs to be able to query the PMT so the format has to be agreed on

![paging](./images/week5/paging.png)

_Benefits of Paging_

- No external fragmentation
- Minimum of internal fragmentation
- Easy protection
- Easy relocation
- Easy sharing

_Converting Logical to Physical_

- the logical address is relative to the start of the process
- To calculate the PAGE number, we do bit shifts because pages are always multiples of 2
- To calculate the OFFSET into the page, we can use XOR
- The page number can be used as an index (like in an array) into the PMT to find the frame number in main memory
- The CPU will the bit-shift that frame number and add the offset to find the physical address

![logical_physical_address](./images/week5/logical_physical_address.png)

---

Simple Segmentation

- Each process is divided into unequal sized partitions
- Logical address now needs a segment number and an offset
- Storage is similar to Dynamic Partitioning

Virtual Memory

- Assumes paging or segmentation
- Since the process will only ever access one memory location at a given time, the rest of the memory of the process doesn't need to be in MAIN memory
- We can swap pages of the process out onto the hard drive (secondary storage) and bring them back later, if needed.
- Example: the splash screen at startup of a process isn't ever needed again after the process is running

What stays? (in main memory)

- Resident set - the portion of the process in main memory
- Working set - that portion of the process which is in use
- In order for the process to run, the working set must be in the resident set
- The PMT contains a "Present" bit to indicate what pages are present in main memory
- The PMT contains a "Modify" bit to indicate if the copy of the page on the hard drive is the same as the copy in memory
- If the MMU encounters a page which the process wants but is not in the resident set, it is called a "Page fault" and the CPU switches to running the OS (like an interrupt)

Benefits of Virtual Memory (VM)

- The programmer perceives a much larger memory space
- The system can remove unused pages
- More processes can run in the system resulting in better performance

Lookup Problems

- Now any memory access by the process requires that the MMU determine the physical address, which requires a query to the PMT
- Each memory access requires two memory accesses
- To save time, the CPU implements a Translation Lookaside Buffer (TLB) which is a type of content addressable memory which stores a cache of those entries in the PMT which been retrieved recently.

![lookup_problems](./images/week5/lookup_problems.png)

Replacement Policy

- When main memory runs out, the OS needs to remove some pages, this is called stealing
- If we choose poorly, the result will be worse performance
- The optimal choice would be to steal the page which is not going to be used for the longest period of time
- Possible Algorithms
  - Optimal - not feasible, but used to look back at what processes did
  - Least-recently used (LRU) - not feasible. Needs timestamps of every memory access for every page in main memory - slows performance
  - FIFO (First-in First-out) - easy to implement but poor performance
  - Clock - easy to implement but requires "USE" bits

![replacement_algorithm](./images/week5/replacement_algorithm.png)

Resident Set Management

- Two problems
  1. How much main memory does each process deserve <br>
     i. Smaller allocations mean more processes <br>
     ii. Larger allocations mean less page faults
  2. When its time to steal a frame, which process do we steal from? <br>
     i. Local - the process page-faulting will lose a page <br>
     ii. Global - any process can lose a page

Controlling page faults by resident set size

- If a process fits entirely in main memory, it will not generate any page faults
- If a process only has one frame, it will generate the maximum number of page faults
- There is a non-linear progression between those two points

![page_fault](./images/week5/page_fault.png)

_Page Fault Frequency (PFF) Algorithm_

- Examine the time between the last page fault and the current one
  - If less than a pre-set F value, add a frame
  - If greater than the pre-set F value, discard all pages with use bit 0, reset all use bits to 0 and continue
- Upper bounds and lower bounds would be better than just F
- Performs poorly during locality shifts

_VSWS Algorithm_

- VSWS (Variable-Interval Sampled Working Set) solves the PFFs problems by setting:
  - A minimum value for clearing unused pages (M)
  - A minimum number of page faults which must have occurred before clearing unused pages (Q)
  - A maximum duration before clearing unused pages (L)
- Below M time unites, always add a frame
- Between M and L
  - If there have been less than Q page faults, add a frame
  - If there have been than Q page faults, discard unused pages, reset use bits, and reset the timer and Q counter
- At L, discard unused pages, reset use bits and reset the time and Q counter

_Load Control_

- If we have too many page faults, it might be advantageous to remove some processes altogether, swapping
- Which processes to we choose?
  - Lowest priority
  - Faulting process: greater probability that it does not have working set resident
  - Last process activated: least likely to have working set resident
  - Process with smallest local resident set
  - Largest process - most bang for buck
  - Process with largest remaining execution window

_Shared pages_

- Using virtual memory and/or paging, we can understand how sharing of structures can occur, both processes have entries in their page table for the same frames
  - Code - since code doesn't change, sharing of code pages is easy
  - Data - since data changes frequently, we can adapt a Copy-on-Write scenario
  - Copy-on-Write - allows sharing of pages
    - The pages table is expanded to allow a "read only" attribute
    - If a page is marked RO (read-only), any attempt to change that page will result in a trap to the OS
    - The OS can then copy the page and mark both the original and the copy as RW (read-write) since its no longer shared

_Unix FORK function_

- Useful in systems which don't have thread support, the UNIX fork function creates an exact duplicate copy of the current process
- This is most easily done by creating a new process, and of course a new page table, but duplicating the data in the original page table
- Both tables, in their entirety, are marked read only
- There's no need to actually COPY the memory until something changes, and then only the page changing will be copied.
